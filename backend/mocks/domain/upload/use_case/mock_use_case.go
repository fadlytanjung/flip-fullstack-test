// Code generated by mockery v2.53.0. DO NOT EDIT.

package use_case

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	schemas "github.com/fadlytanjung/flip-fullstack-test/backend/domain/transaction/schemas"
)

// MockIUseCase is an autogenerated mock type for the IUseCase type
type MockIUseCase struct {
	mock.Mock
}

type MockIUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUseCase) EXPECT() *MockIUseCase_Expecter {
	return &MockIUseCase_Expecter{mock: &_m.Mock}
}

// ParseAndStore provides a mock function with given fields: ctx, file
func (_m *MockIUseCase) ParseAndStore(ctx context.Context, file io.Reader) (*schemas.UploadResponse, error) {
	ret := _m.Called(ctx, file)

	if len(ret) == 0 {
		panic("no return value specified for ParseAndStore")
	}

	var r0 *schemas.UploadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) (*schemas.UploadResponse, error)); ok {
		return rf(ctx, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) *schemas.UploadResponse); ok {
		r0 = rf(ctx, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.UploadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.Reader) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUseCase_ParseAndStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseAndStore'
type MockIUseCase_ParseAndStore_Call struct {
	*mock.Call
}

// ParseAndStore is a helper method to define mock.On call
func (_e *MockIUseCase_Expecter) ParseAndStore(ctx interface{}, file interface{}) *MockIUseCase_ParseAndStore_Call {
	return &MockIUseCase_ParseAndStore_Call{Call: _e.mock.On("ParseAndStore", ctx, file)}
}

func (_c *MockIUseCase_ParseAndStore_Call) Run(run func(ctx context.Context, file io.Reader)) *MockIUseCase_ParseAndStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader))
	})
	return _c
}

func (_c *MockIUseCase_ParseAndStore_Call) Return(_a0 *schemas.UploadResponse, _a1 error) *MockIUseCase_ParseAndStore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUseCase_ParseAndStore_Call) RunAndReturn(run func(context.Context, io.Reader) (*schemas.UploadResponse, error)) *MockIUseCase_ParseAndStore_Call {
	_c.Call.Return(run)
	return _c
}

// ParseAndStoreWithValidation provides a mock function with given fields: ctx, file
func (_m *MockIUseCase) ParseAndStoreWithValidation(ctx context.Context, file io.Reader) (*schemas.UploadResponse, error) {
	ret := _m.Called(ctx, file)

	if len(ret) == 0 {
		panic("no return value specified for ParseAndStoreWithValidation")
	}

	var r0 *schemas.UploadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) (*schemas.UploadResponse, error)); ok {
		return rf(ctx, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) *schemas.UploadResponse); ok {
		r0 = rf(ctx, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.UploadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.Reader) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUseCase_ParseAndStoreWithValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseAndStoreWithValidation'
type MockIUseCase_ParseAndStoreWithValidation_Call struct {
	*mock.Call
}

// ParseAndStoreWithValidation is a helper method to define mock.On call
func (_e *MockIUseCase_Expecter) ParseAndStoreWithValidation(ctx interface{}, file interface{}) *MockIUseCase_ParseAndStoreWithValidation_Call {
	return &MockIUseCase_ParseAndStoreWithValidation_Call{Call: _e.mock.On("ParseAndStoreWithValidation", ctx, file)}
}

func (_c *MockIUseCase_ParseAndStoreWithValidation_Call) Run(run func(ctx context.Context, file io.Reader)) *MockIUseCase_ParseAndStoreWithValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader))
	})
	return _c
}

func (_c *MockIUseCase_ParseAndStoreWithValidation_Call) Return(_a0 *schemas.UploadResponse, _a1 error) *MockIUseCase_ParseAndStoreWithValidation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUseCase_ParseAndStoreWithValidation_Call) RunAndReturn(run func(context.Context, io.Reader) (*schemas.UploadResponse, error)) *MockIUseCase_ParseAndStoreWithValidation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUseCase creates a new instance of MockIUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUseCase {
	mock := &MockIUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
