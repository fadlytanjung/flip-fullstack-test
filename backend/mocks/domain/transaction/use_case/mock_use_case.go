// Code generated by mockery v2.53.0. DO NOT EDIT.

package use_case

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	schemas "github.com/fadlytanjung/flip-fullstack-test/backend/domain/transaction/schemas"
)

// MockIUseCase is an autogenerated mock type for the IUseCase type
type MockIUseCase struct {
	mock.Mock
}

type MockIUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUseCase) EXPECT() *MockIUseCase_Expecter {
	return &MockIUseCase_Expecter{mock: &_m.Mock}
}

// GetBalance provides a mock function with given fields: ctx
func (_m *MockIUseCase) GetBalance(ctx context.Context) (*schemas.BalanceResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *schemas.BalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*schemas.BalanceResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *schemas.BalanceResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.BalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUseCase_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type MockIUseCase_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
func (_e *MockIUseCase_Expecter) GetBalance(ctx interface{}) *MockIUseCase_GetBalance_Call {
	return &MockIUseCase_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx)}
}

func (_c *MockIUseCase_GetBalance_Call) Run(run func(ctx context.Context)) *MockIUseCase_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIUseCase_GetBalance_Call) Return(_a0 *schemas.BalanceResponse, _a1 error) *MockIUseCase_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUseCase_GetBalance_Call) RunAndReturn(run func(context.Context) (*schemas.BalanceResponse, error)) *MockIUseCase_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssues provides a mock function with given fields: ctx, page, pageSize
func (_m *MockIUseCase) GetIssues(ctx context.Context, page int, pageSize int) (*schemas.IssuesResponse, error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetIssues")
	}

	var r0 *schemas.IssuesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*schemas.IssuesResponse, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *schemas.IssuesResponse); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.IssuesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUseCase_GetIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssues'
type MockIUseCase_GetIssues_Call struct {
	*mock.Call
}

// GetIssues is a helper method to define mock.On call
func (_e *MockIUseCase_Expecter) GetIssues(ctx interface{}, page interface{}, pageSize interface{}) *MockIUseCase_GetIssues_Call {
	return &MockIUseCase_GetIssues_Call{Call: _e.mock.On("GetIssues", ctx, page, pageSize)}
}

func (_c *MockIUseCase_GetIssues_Call) Run(run func(ctx context.Context, page int, pageSize int)) *MockIUseCase_GetIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockIUseCase_GetIssues_Call) Return(_a0 *schemas.IssuesResponse, _a1 error) *MockIUseCase_GetIssues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUseCase_GetIssues_Call) RunAndReturn(run func(context.Context, int, int) (*schemas.IssuesResponse, error)) *MockIUseCase_GetIssues_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssuesWithFiltersAndSort provides a mock function with given fields: ctx, page, pageSize, filters, sort
func (_m *MockIUseCase) GetIssuesWithFiltersAndSort(ctx context.Context, page int, pageSize int, filters schemas.TransactionFilters, sort schemas.TransactionSort) (*schemas.IssuesResponse, error) {
	ret := _m.Called(ctx, page, pageSize, filters, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetIssuesWithFiltersAndSort")
	}

	var r0 *schemas.IssuesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, schemas.TransactionFilters, schemas.TransactionSort) (*schemas.IssuesResponse, error)); ok {
		return rf(ctx, page, pageSize, filters, sort)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, schemas.TransactionFilters, schemas.TransactionSort) *schemas.IssuesResponse); ok {
		r0 = rf(ctx, page, pageSize, filters, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.IssuesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, schemas.TransactionFilters, schemas.TransactionSort) error); ok {
		r1 = rf(ctx, page, pageSize, filters, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUseCase_GetIssuesWithFiltersAndSort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssuesWithFiltersAndSort'
type MockIUseCase_GetIssuesWithFiltersAndSort_Call struct {
	*mock.Call
}

// GetIssuesWithFiltersAndSort is a helper method to define mock.On call
func (_e *MockIUseCase_Expecter) GetIssuesWithFiltersAndSort(ctx interface{}, page interface{}, pageSize interface{}, filters interface{}, sort interface{}) *MockIUseCase_GetIssuesWithFiltersAndSort_Call {
	return &MockIUseCase_GetIssuesWithFiltersAndSort_Call{Call: _e.mock.On("GetIssuesWithFiltersAndSort", ctx, page, pageSize, filters, sort)}
}

func (_c *MockIUseCase_GetIssuesWithFiltersAndSort_Call) Run(run func(ctx context.Context, page int, pageSize int, filters schemas.TransactionFilters, sort schemas.TransactionSort)) *MockIUseCase_GetIssuesWithFiltersAndSort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(schemas.TransactionFilters), args[4].(schemas.TransactionSort))
	})
	return _c
}

func (_c *MockIUseCase_GetIssuesWithFiltersAndSort_Call) Return(_a0 *schemas.IssuesResponse, _a1 error) *MockIUseCase_GetIssuesWithFiltersAndSort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUseCase_GetIssuesWithFiltersAndSort_Call) RunAndReturn(run func(context.Context, int, int, schemas.TransactionFilters, schemas.TransactionSort) (*schemas.IssuesResponse, error)) *MockIUseCase_GetIssuesWithFiltersAndSort_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUseCase creates a new instance of MockIUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUseCase {
	mock := &MockIUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
